[{"/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/App.js":"1","/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/components/hospital/HospitalDetail.js":"2","/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/components/staff/StaffChat.js":"3","/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/components/charts/Graphs.js":"4","/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/components/about/About.js":"5","/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/components/profile/UserProfile.js":"6","/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/components/staff/StaffPanel.js":"7","/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/components/authentication/Login.js":"8","/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/reportWebVitals.js":"9","/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/components/hospital/Hospitals.js":"10","/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/components/authentication/SignUp.js":"11","/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/index.js":"12","/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/components/authentication/Logout.js":"13","/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/context/ThemeContext.js":"14","/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/components/home/Home.js":"15","/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/components/authentication/OTP.js":"16"},{"size":749,"mtime":1620582616539,"results":"17","hashOfConfig":"18"},{"size":6810,"mtime":1620977256575,"results":"19","hashOfConfig":"18"},{"size":8665,"mtime":1620973622825,"results":"20","hashOfConfig":"18"},{"size":10872,"mtime":1620676219228,"results":"21","hashOfConfig":"18"},{"size":1093,"mtime":1618518646818,"results":"22","hashOfConfig":"18"},{"size":13147,"mtime":1620619288811,"results":"23","hashOfConfig":"18"},{"size":1408,"mtime":1620973622825,"results":"24","hashOfConfig":"18"},{"size":7180,"mtime":1620800170051,"results":"25","hashOfConfig":"18"},{"size":362,"mtime":1618518646822,"results":"26","hashOfConfig":"18"},{"size":6956,"mtime":1620973622825,"results":"27","hashOfConfig":"18"},{"size":14211,"mtime":1620582616539,"results":"28","hashOfConfig":"18"},{"size":792,"mtime":1620582616543,"results":"29","hashOfConfig":"18"},{"size":2120,"mtime":1618518646818,"results":"30","hashOfConfig":"18"},{"size":447,"mtime":1618518646822,"results":"31","hashOfConfig":"18"},{"size":1471,"mtime":1620973622825,"results":"32","hashOfConfig":"18"},{"size":5609,"mtime":1620582616539,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1framo8",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/App.js",[],["70","71"],"/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/components/hospital/HospitalDetail.js",[],"/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/components/staff/StaffChat.js",["72"],"import React from \"react\";\nimport { Box, Chip,Grid, IconButton, Paper, TextField, Typography,makeStyles} from \"@material-ui/core\";\nimport { Redirect } from \"react-router\";\nimport jwtDecode from 'jwt-decode'\nimport axios from \"axios\";\nimport {getToken} from \"../authentication/cookies\";\nimport Button from \"@material-ui/core/Button\";\nimport { SendRounded } from \"@material-ui/icons\";\nimport clsx from \"clsx\";\n\nconst useStyles = makeStyles((theme) => ({\n    messageLeft : {\n        display:'flex',\n        justifyContent:'flex-start'\n    },\n    messageRight : {\n        display:'flex',\n        justifyContent:'flex-end'\n    },\n    message : {\n        padding:5,\n        margin : 5,\n        justifyContent : 'flex-end',\n        backgroundColor : theme.palette.primary,\n        width:'fit-content'\n    }\n}));\n\nconst StaffChat = () => {\n    let token = getToken();\n    const is_staff = token ==='' ? 'true' : jwtDecode(token).is_staff;\n    const [text, setText] = React.useState('');\n    const [messages, setMessages] = React.useState([]);\n    const [chats,setChats] = React.useState([]);\n    const [socket,setSocket] = React.useState(null);\n    const classes = useStyles();\n    const [currentChatUser,setcurrentChatUser] = React.useState({email : '',name : '',slug : ''});\n\n    React.useEffect(() => {\n        axios.get(`${process.env.REACT_APP_API_URL}/portal/hospitals/${jwtDecode(token).hospital_slug}/`,\n            {\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    Authorization: `Token ${token}`, // fetch all chats of hospital\n                },\n                data : {\n                    hospital_slug : jwtDecode(token).hospital_slug,\n                }\n            }).then(res=>{\n                setChats(res.data.chats);\n                setcurrentChatUser({\n                    ...currentChatUser,\n                    email : res.data.chats[0].user_email,\n                    name : res.data.chats[0].name,\n                    slug : res.data.chats[0].chat_slug\n                })\n                connecttoSocket(res.data.chats[0].chat_slug);\n                var element = document.getElementById(\"chat\");\n    \t        element.scrollTop = element.scrollHeight;\n            })\n    }, []);\n\n    \n    if(token === '') {\n        return <Redirect to='/'/>\n    }\n\n    if(is_staff==='false'){\n        return <Redirect to='/hospitals'/>\n    }\n\n    const connecttoSocket = (slug)=>{\n        let socket = new WebSocket(`${process.env.REACT_APP_SOCKET_URL}/ws/chat/${slug}/`);\n        socket.onopen = function(e) {\n            socket.send(JSON.stringify({\n                'command': 'fetch_messages',\n                'email': jwtDecode(token).email,\n                'chatSlug': slug\n            }))\n            \n            setMessages(JSON.parse(e.data).messages)\n        };\n\n        socket.onmessage = (e)=>{\n            setMessages(JSON.parse(e.data).messages)\n        }\n\n        socket.onclose = function(event) {\n            if (event.wasClean) {\n                alert(`[close] Connection closed cleanly, code=${event.code} reason=${event.reason}`);\n            } else {\n                // e.g. server process killed or network down\n                // event.code is usually 1006 in this case\n                alert('[close] Connection died');\n            }\n        };\n\n        socket.onerror = function(error) {\n            console.log(error.message);\n        }; \n        setSocket(socket);\n    }\n\n\n    const sendMessage = () => {\n        socket.send(JSON.stringify({\n            'message': text,\n            'from': (jwtDecode(getToken())).email,\n            'command': 'new_message',\n            'chatSlug': currentChatUser.slug\n        }));\n        setText('');\n    }\n\n    const handleChange = (email,name,slug)=>{\n        if(email!==currentChatUser.email){\n            setcurrentChatUser({\n                ...currentChatUser,\n                email : email,\n                name : name\n            })\n            //connect to socket\n            if(socket){\n                socket.close();\n            }    \n            connecttoSocket(slug); \n        }\n    }\n\n    const renderMessages = ()=>(\n        <React.Fragment>\n            {messages.map(message=>(\n                <Box key={message._id} color=\"primary.main\" className={clsx({\n                    [classes.messageLeft] : (message.user !== jwtDecode(token).email), //always applies\n                    [classes.messageRight] : (message.user === jwtDecode(token).email) //only when open === true\n                })}>\n                    <Paper variant='outlined' className={classes.message}>\n                        <Typography variant='h6'>{message.message}</Typography>\n                        <Typography variant='caption' color='textSecondary'>{renderTimestamp(message.timestamp)}</Typography>\n                    </Paper>\n                </Box>\n            ))}\n        </React.Fragment>\n    )\n    const renderTimestamp = timestamp => {\n        let prefix = \"\";\n        const timeDiff = Math.round(\n            (new Date().getTime() - new Date(timestamp).getTime()) / 60000\n        );\n        if (timeDiff < 1) {\n            // less than one minute ago\n            prefix = \"just now...\";\n        } else if (timeDiff < 60 && timeDiff > 1) {\n            // less than sixty minutes ago\n            prefix = `${timeDiff} minutes ago`;\n        } else if (timeDiff < 24 * 60 && timeDiff > 60) {\n            // less than 24 hours ago\n            prefix = `${Math.round(timeDiff / 60)} hours ago`;\n        } else if (timeDiff < 31 * 24 * 60 && timeDiff > 24 * 60) {\n            // less than 7 days ago\n            prefix = `${Math.round(timeDiff / (60 * 24))} days ago`;\n        } else {\n            prefix = `${new Date(timestamp).toDateString()}`;\n        }\n        return prefix;\n    };\n\n    const renderChats = ()=>(\n        <React.Fragment>\n            {chats.map(chat=>( \n                <Paper elevation={2} key={chat.chat_slug} \n                        style={{marginTop:10,padding:10,display:\"flex\",justifyContent:'space-between'}}\n                        onClick={handleChange.bind(this,chat.user_email,chat.name,chat.chat_slug)}\n                        >\n                    <div>\n                        <Typography variant='h6'>{chat.name}</Typography>\n                        <Typography variant='caption' color=\"textSecondary\">{chat.last_message}</Typography>\n                    </div>\n                    <Chip size='small' label={'Active'} color='primary'/>\n                </Paper>\n                    )\n                )\n            }\n        </React.Fragment>\n    )\n\n    return (\n       <Grid container spacing={3}>\n           <Grid item xs={6}>\n                <Paper elevation={2} style={{padding:10,display:\"flex\",justifyContent:'space-between'}}>\n                    <Typography variant='h4'>Chats</Typography>\n                    <Button variant='contained' color='primary' size=\"small\">Broadcast Message</Button>\n                </Paper>   \n                {renderChats()}\n           </Grid>\n           <Grid item xs={6}>\n                <Box>\n                    <Paper elevation={3} style={{padding:10}}>\n                        <Typography variant='h5'>{currentChatUser.name}</Typography>\n                        <Typography variant='h6' color=\"textSecondary\" >{currentChatUser.email}</Typography>\n                    </Paper>\n                    <Paper elevation={3} id='chat' style={{\n                        marginTop:10,\n                        height:500,\n                        padding:10,\n                        overflow:'auto'\n                        }}>\n                        {renderMessages()}\n                    </Paper>\n                    <Paper elevation={3} style={{\n                        padding :10,\n                        alignItems:'center',\n                        bottom:0,\n                        overflow:'hidden',\n                        display:'flex',\n                        justifyContent:'space-between',\n                        marginTop:10\n                    }}>\n                        <TextField\n                            placeholder=\"Type a message\"\n                            variant='outlined'\n                            onChange={(event => setText(event.target.value))}\n                            value={text}\n                            fullWidth\n                        />\n                        <IconButton>\n                            <SendRounded fontSize='large' onClick={sendMessage}/>\n                        </IconButton>\n                    </Paper>           \n                </Box>           \n           </Grid>\n       </Grid>\n    )\n}\n\nexport default StaffChat;","/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/components/charts/Graphs.js",[],"/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/components/about/About.js",[],["73","74"],"/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/components/profile/UserProfile.js",[],"/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/components/staff/StaffPanel.js",[],"/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/components/authentication/Login.js",[],"/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/reportWebVitals.js",[],"/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/components/hospital/Hospitals.js",[],["75","76"],"/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/components/authentication/SignUp.js",[],"/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/index.js",[],"/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/components/authentication/Logout.js",[],"/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/context/ThemeContext.js",[],"/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/components/home/Home.js",[],"/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/components/authentication/OTP.js",[],{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":61,"column":8,"nodeType":"83","endLine":61,"endColumn":10,"suggestions":"84"},{"ruleId":"77","replacedBy":"85"},{"ruleId":"79","replacedBy":"86"},{"ruleId":"77","replacedBy":"87"},{"ruleId":"79","replacedBy":"88"},"no-native-reassign",["89"],"no-negated-in-lhs",["90"],"react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'connecttoSocket', 'currentChatUser', and 'token'. Either include them or remove the dependency array. You can also do a functional update 'setcurrentChatUser(c => ...)' if you only need 'currentChatUser' in the 'setcurrentChatUser' call.","ArrayExpression",["91"],["89"],["90"],["89"],["90"],"no-global-assign","no-unsafe-negation",{"desc":"92","fix":"93"},"Update the dependencies array to be: [connecttoSocket, currentChatUser, token]",{"range":"94","text":"95"},[2246,2248],"[connecttoSocket, currentChatUser, token]"]