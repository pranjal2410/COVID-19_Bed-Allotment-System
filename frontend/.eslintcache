[{"C:\\Users\\admin\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\components\\staff\\StaffChat.js":"1","C:\\Users\\admin\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\App.js":"2","C:\\Users\\admin\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\components\\about\\About.js":"3","C:\\Users\\admin\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\components\\charts\\Graphs.js":"4","C:\\Users\\admin\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\components\\chat\\reviews.js":"5","C:\\Users\\admin\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\components\\staff\\StaffPanel.js":"6","C:\\Users\\admin\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\components\\application\\CreateApplication.js":"7","C:\\Users\\admin\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\components\\authentication\\Login.js":"8","C:\\Users\\admin\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\components\\hospital\\Hospitals.js":"9","C:\\Users\\admin\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\index.js":"10","C:\\Users\\admin\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\components\\navigation\\Navbar.js":"11","C:\\Users\\admin\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\components\\authentication\\OTP.js":"12","C:\\Users\\admin\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\components\\home\\Home.js":"13","C:\\Users\\admin\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\components\\hospital\\HospitalDetail.js":"14","C:\\Users\\admin\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\reportWebVitals.js":"15","C:\\Users\\admin\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\components\\authentication\\cookies.js":"16","C:\\Users\\admin\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\components\\authentication\\Logout.js":"17"},{"size":11769,"mtime":1621322365957,"results":"18","hashOfConfig":"19"},{"size":774,"mtime":1620973564696,"results":"20","hashOfConfig":"21"},{"size":1112,"mtime":1619934055235,"results":"22","hashOfConfig":"19"},{"size":11112,"mtime":1620642227918,"results":"23","hashOfConfig":"21"},{"size":2382,"mtime":1621080105141,"results":"24","hashOfConfig":"19"},{"size":8498,"mtime":1621249577546,"results":"25","hashOfConfig":"21"},{"size":10210,"mtime":1622480676876,"results":"26","hashOfConfig":"21"},{"size":7302,"mtime":1620975585036,"results":"27","hashOfConfig":"21"},{"size":7707,"mtime":1621240364586,"results":"28","hashOfConfig":"21"},{"size":816,"mtime":1620366572155,"results":"29","hashOfConfig":"19"},{"size":13693,"mtime":1622439883376,"results":"30","hashOfConfig":"19"},{"size":5751,"mtime":1620554355511,"results":"31","hashOfConfig":"19"},{"size":1499,"mtime":1621068707003,"results":"32","hashOfConfig":"21"},{"size":10636,"mtime":1622462042926,"results":"33","hashOfConfig":"21"},{"size":375,"mtime":1619934055275,"results":"34","hashOfConfig":"19"},{"size":828,"mtime":1621069998940,"results":"35","hashOfConfig":"21"},{"size":2172,"mtime":1621240364582,"results":"36","hashOfConfig":"21"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"40"},"1uzpb5p",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},"1fgf3se",{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\admin\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\components\\staff\\StaffChat.js",["75"],"import React from \"react\";\r\nimport { Box,Chip,Grid, IconButton, Paper, TextField, Typography,makeStyles, Container, Dialog, DialogTitle, DialogContent,DialogContentText,DialogActions} from \"@material-ui/core\";\r\nimport { Redirect } from \"react-router\";\r\nimport jwtDecode from 'jwt-decode'\r\nimport axios from \"axios\";\r\nimport {getToken} from \"../authentication/cookies\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { SendRounded } from \"@material-ui/icons\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport clsx from \"clsx\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    messageLeft : {\r\n        display:'flex',\r\n        justifyContent:'flex-start'\r\n    },\r\n    messageRight : {\r\n        display:'flex',\r\n        justifyContent:'flex-end'\r\n    },\r\n    message : {\r\n        padding:5,\r\n        margin : 5,\r\n        justifyContent : 'flex-end',\r\n        backgroundColor : theme.palette.primary,\r\n        width:'fit-content'\r\n    }\r\n}));\r\n\r\nconst StaffChat = () => {\r\n    let token = getToken();\r\n    const is_staff = token ==='' ? 'true' : jwtDecode(token).is_staff;\r\n    const [text, setText] = React.useState('');\r\n    const [messages, setMessages] = React.useState([]);\r\n    const [chats,setChats] = React.useState([]);\r\n    const [socket,setSocket] = React.useState(null);\r\n    const [open,setOpen] = React.useState(false);\r\n    const classes = useStyles();\r\n    const [currentChatUser,setcurrentChatUser] = React.useState({email : '',name : '',slug : ''});\r\n    const {enqueueSnackbar, closeSnackbar} = useSnackbar();\r\n    const showAlert = (key,message,variant)=>enqueueSnackbar(message, {variant: variant, key: key});\r\n    const closeAlert = (key,time)=>setTimeout(() => closeSnackbar(key),time);\r\n\r\n    React.useEffect(() => {\r\n        showAlert('chats','Getting your chats...','info');\r\n        axios.get(`${process.env.REACT_APP_API_URL}/portal/hospitals/${jwtDecode(token).hospital_slug}/`,{\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    Authorization: `Token ${token}` // fetch all chats of hospital\r\n                }\r\n            }).then(res=>{\r\n                closeAlert('chats',2000);\r\n                setChats(res.data.chats);\r\n                setcurrentChatUser({\r\n                    ...currentChatUser,\r\n                    email : res.data.chats[0].user_email,\r\n                    name : res.data.chats[0].name,\r\n                    slug : res.data.chats[0].chat_slug\r\n                })\r\n                connecttoSocket(res.data.chats[0].chat_slug);\r\n            }).catch((error)=>{\r\n                closeAlert('chats',2000);\r\n                showAlert('chats_error',error.message,'error');\r\n                closeAlert('chats_error',2000);\r\n            })\r\n\r\n            return ()=>{\r\n                if(socket){\r\n                    socket.close();\r\n                }\r\n            }\r\n    }, []);\r\n\r\n    \r\n    if(token === '' || is_staff===false) {\r\n        return <Redirect to='/'/>\r\n    }\r\n\r\n    const connecttoSocket = (slug)=>{\r\n        var element = document.getElementById(\"chat\");\r\n        let socket = new WebSocket(`${process.env.REACT_APP_SOCKET_URL}/ws/chat/${slug}/`);\r\n        socket.onopen = function(e) {\r\n            socket.send(JSON.stringify({\r\n                'command': 'fetch_messages',\r\n                'email': jwtDecode(token).email,\r\n                'chatSlug': slug\r\n            }))\r\n            setMessages(JSON.parse(e.data).messages)\r\n            element.scrollTop = element.scrollHeight;\r\n        };\r\n\r\n        socket.onmessage = (e)=>{\r\n            setMessages(JSON.parse(e.data).messages)\r\n            element.scrollTop = element.scrollHeight;\r\n        }\r\n\r\n        socket.onclose = function(event) {\r\n            if (event.wasClean) {\r\n                showAlert('socket_close',`Connection closed cleanly, code=${event.code} reason=${event.reason}`,'error');\r\n            } else {\r\n                showAlert('socket_close','Connection died','error');\r\n            }\r\n            closeAlert('socket_close',2000);\r\n        };\r\n\r\n        socket.onerror = function(error) {\r\n            showAlert('socket_error',error,'error');\r\n            closeAlert('socket_error',2000);\r\n        }; \r\n        setSocket(socket);\r\n    }\r\n\r\n\r\n    const sendMessage = () => {\r\n        socket.send(JSON.stringify({\r\n            'message': text,\r\n            'from': (jwtDecode(getToken())).email,\r\n            'command': 'new_message',\r\n            'chatSlug': currentChatUser.slug //old state\r\n        }));\r\n        \r\n        let user_chats = [...chats];\r\n        user_chats.forEach(chat=>{\r\n            if(chat.user_email === currentChatUser.email){\r\n                chat.last_message = text;\r\n            }\r\n        })\r\n        setChats(user_chats);\r\n        setText('');\r\n    }\r\n\r\n    const broadcastMessage = () => {\r\n        socket.send(JSON.stringify({\r\n            'message': text,\r\n            'from': jwtDecode(getToken()).email,\r\n            'command': 'broadcast_message',\r\n        }));\r\n        let user_chats = [...chats];\r\n        user_chats.forEach(chat=>{\r\n           \r\n                chat.last_message = text;\r\n        })\r\n        setChats(user_chats);\r\n        setText('');\r\n    }\r\n\r\n    const handleChange = (email,name,slug)=>{\r\n        if(email!==currentChatUser.email){\r\n            setcurrentChatUser({\r\n                ...currentChatUser,\r\n                email : email,\r\n                name : name,\r\n                slug : slug\r\n            })\r\n            //connect to socket\r\n            if(socket){\r\n                socket.close();\r\n            }    \r\n            connecttoSocket(slug); \r\n        }\r\n    }\r\n\r\n    const renderMessages = ()=>(\r\n        <React.Fragment>\r\n            {messages.map(message=>(\r\n                <Box key={message.id} color=\"primary.main\" className={clsx({\r\n                    [classes.messageLeft] : (message.user !== jwtDecode(token).email), //always applies\r\n                    [classes.messageRight] : (message.user === jwtDecode(token).email) //only when open === true\r\n                })}>\r\n                    <Paper variant='outlined' className={classes.message}>\r\n                        <Typography variant='h6'>{message.message}</Typography>\r\n                        <Typography variant='caption' color='textSecondary'>{renderTimestamp(message.timestamp)}</Typography>\r\n                    </Paper>\r\n                </Box>\r\n            ))}\r\n        </React.Fragment>\r\n    )\r\n    const renderTimestamp = timestamp => {\r\n        let prefix = \"\";\r\n        const timeDiff = Math.round(\r\n            (new Date().getTime() - new Date(timestamp).getTime()) / 60000\r\n        );\r\n        if (timeDiff < 1) {\r\n            // less than one minute ago\r\n            prefix = \"just now...\";\r\n        } else if (timeDiff < 60 && timeDiff > 1) {\r\n            // less than sixty minutes ago\r\n            prefix = `${timeDiff} minutes ago`;\r\n        } else if (timeDiff < 24 * 60 && timeDiff > 60) {\r\n            // less than 24 hours ago\r\n            prefix = `${Math.round(timeDiff / 60)} hours ago`;\r\n        } else if (timeDiff < 31 * 24 * 60 && timeDiff > 24 * 60) {\r\n            // less than 7 days ago\r\n            prefix = `${Math.round(timeDiff / (60 * 24))} days ago`;\r\n        } else {\r\n            prefix = `${new Date(timestamp).toDateString()}`;\r\n        }\r\n        return prefix;\r\n    };\r\n\r\n    const broadcastDialog = ()=>(\r\n        <Dialog open = {open}>\r\n            <DialogTitle>Broadcast a message</DialogTitle>\r\n            <DialogContent>\r\n                <DialogContentText>\r\n                    You can broadcast a message to all the applicants of your hospital.\r\n                </DialogContentText>\r\n                <TextField\r\n                    variant=\"outlined\"\r\n                    label=\"Type your message here...\"\r\n                    margin=\"normal\"\r\n                    onChange={event => setText(event.target.value)}\r\n                    fullWidth\r\n                    required/>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={()=> setOpen(false)} color=\"secondary\">\r\n                    Cancel\r\n                </Button>\r\n                <Button onClick={broadcastMessage} color=\"primary\">\r\n                    Send\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    )\r\n    const renderChats = ()=>(\r\n        <React.Fragment>\r\n            {chats.map(chat=>( \r\n                <Paper elevation={2} key={chat.chat_slug} \r\n                        style={{marginTop:10,padding:10,display:\"flex\",justifyContent:'space-between'}}\r\n                        onClick={handleChange.bind(this,chat.user_email,chat.name,chat.chat_slug)}\r\n                        >\r\n                    <div>\r\n                        <Typography variant='h6'>{chat.name}</Typography>\r\n                        <Typography variant='caption' color=\"textSecondary\">{chat.last_message}</Typography>\r\n                    </div>\r\n                    <Chip size='small' label={'Active'} color='primary'/>\r\n                </Paper>\r\n                    )\r\n                )\r\n            }\r\n        </React.Fragment>\r\n    )\r\n\r\n    return (\r\n        <Container>\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={6}>\r\n                        <Paper elevation={2} style={{padding:10,display:\"flex\",justifyContent:'space-between'}}>\r\n                            <Typography variant='h4'>Chats</Typography>\r\n                            <Button variant='contained' color='primary' size=\"small\" \r\n                                onClick={()=>setOpen(true)}>Broadcast Message</Button>\r\n                        </Paper>   \r\n                        {renderChats()}\r\n                </Grid>\r\n                <Grid item xs={12} sm={6}>\r\n                        <Box>\r\n                            <Paper elevation={3} style={{padding:10}}>\r\n                                <Typography variant='h5'>{currentChatUser.name}</Typography>\r\n                                <Typography variant='h6' color=\"textSecondary\" >{currentChatUser.email}</Typography>\r\n                            </Paper>\r\n                            <Paper elevation={3} id='chat' style={{\r\n                                marginTop:10,\r\n                                height:500,\r\n                                padding:10,\r\n                                overflow:'auto'\r\n                                }}>\r\n                                {renderMessages()}\r\n                            </Paper>\r\n                            <Paper elevation={3} style={{\r\n                                padding :10,\r\n                                alignItems:'center',\r\n                                bottom:0,\r\n                                overflow:'hidden',\r\n                                display:'flex',\r\n                                justifyContent:'space-between',\r\n                                marginTop:10\r\n                            }}>\r\n                                <TextField\r\n                                    placeholder=\"Type a message\"\r\n                                    variant='outlined'\r\n                                    onChange={(event => setText(event.target.value))}\r\n                                    value={text}\r\n                                    fullWidth\r\n                                />\r\n                                <IconButton  onClick={sendMessage}>\r\n                                    <SendRounded fontSize='large'/>\r\n                                </IconButton>\r\n                            </Paper>           \r\n                        </Box>           \r\n                </Grid>\r\n                {broadcastDialog()}\r\n            </Grid>\r\n       </Container>\r\n    )\r\n}\r\n\r\nexport default StaffChat;",["76","77"],"C:\\Users\\admin\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\App.js",[],["78","79"],"C:\\Users\\admin\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\components\\about\\About.js",[],["80","81"],"C:\\Users\\admin\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\components\\charts\\Graphs.js",[],"C:\\Users\\admin\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\components\\chat\\reviews.js",[],"C:\\Users\\admin\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\components\\staff\\StaffPanel.js",["82","83"],"C:\\Users\\admin\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\components\\application\\CreateApplication.js",["84","85","86"],"C:\\Users\\admin\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\components\\authentication\\Login.js",[],"C:\\Users\\admin\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\components\\hospital\\Hospitals.js",[],"C:\\Users\\admin\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\index.js",[],"C:\\Users\\admin\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\components\\navigation\\Navbar.js",[],"C:\\Users\\admin\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\components\\authentication\\OTP.js",[],"C:\\Users\\admin\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\components\\home\\Home.js",[],"C:\\Users\\admin\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\components\\hospital\\HospitalDetail.js",[],"C:\\Users\\admin\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\admin\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\components\\authentication\\cookies.js",[],"C:\\Users\\admin\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\components\\authentication\\Logout.js",[],{"ruleId":"87","severity":1,"message":"88","line":72,"column":8,"nodeType":"89","endLine":72,"endColumn":10,"suggestions":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"91","replacedBy":"95"},{"ruleId":"93","replacedBy":"96"},{"ruleId":"91","replacedBy":"97"},{"ruleId":"93","replacedBy":"98"},{"ruleId":"99","severity":1,"message":"100","line":3,"column":10,"nodeType":"101","messageId":"102","endLine":3,"endColumn":18},{"ruleId":"87","severity":1,"message":"103","line":145,"column":7,"nodeType":"89","endLine":145,"endColumn":9,"suggestions":"104"},{"ruleId":"99","severity":1,"message":"105","line":42,"column":12,"nodeType":"101","messageId":"102","endLine":42,"endColumn":20},{"ruleId":"99","severity":1,"message":"106","line":44,"column":24,"nodeType":"101","messageId":"102","endLine":44,"endColumn":37},{"ruleId":"107","severity":1,"message":"108","line":91,"column":9,"nodeType":"109","messageId":"110","endLine":91,"endColumn":13,"fix":"111"},"react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'closeAlert', 'connecttoSocket', 'currentChatUser', 'showAlert', 'socket', and 'token'. Either include them or remove the dependency array. You can also do a functional update 'setcurrentChatUser(c => ...)' if you only need 'currentChatUser' in the 'setcurrentChatUser' call.","ArrayExpression",["112"],"no-native-reassign",["113"],"no-negated-in-lhs",["114"],["113"],["114"],["113"],["114"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","React Hook React.useEffect has missing dependencies: 'closeAlert', 'showAlert', and 'token'. Either include them or remove the dependency array.",["115"],"'numPages' is assigned a value but never used.","'setPageNumber' is assigned a value but never used.","no-extra-bind","The function binding is unnecessary.","CallExpression","unexpected",{"range":"116","text":"117"},{"desc":"118","fix":"119"},"no-global-assign","no-unsafe-negation",{"desc":"120","fix":"121"},[3310,3321],"","Update the dependencies array to be: [closeAlert, connecttoSocket, currentChatUser, showAlert, socket, token]",{"range":"122","text":"123"},"Update the dependencies array to be: [closeAlert, showAlert, token]",{"range":"124","text":"125"},[2890,2892],"[closeAlert, connecttoSocket, currentChatUser, showAlert, socket, token]",[3893,3895],"[closeAlert, showAlert, token]"]