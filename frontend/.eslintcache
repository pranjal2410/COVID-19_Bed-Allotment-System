[{"C:\\Users\\me\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\index.js":"1","C:\\Users\\me\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\context\\ThemeContext.js":"2","C:\\Users\\me\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\components\\navigation\\Navbar.js":"3","C:\\Users\\me\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\components\\authentication\\cookies.js":"4","C:\\Users\\me\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\components\\authentication\\Login.js":"5","C:\\Users\\me\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\components\\authentication\\SignUp.js":"6","C:\\Users\\me\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\components\\authentication\\Logout.js":"7","C:\\Users\\me\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\components\\home\\Home.js":"8","C:\\Users\\me\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\components\\profile\\UserProfile.js":"9","C:\\Users\\me\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\components\\charts\\Graphs.js":"10","C:\\Users\\me\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\components\\home\\News.js":"11","C:\\Users\\me\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\components\\authentication\\OTP.js":"12","C:\\Users\\me\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\App.js":"13","C:\\Users\\me\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\components\\hospital\\Hospitals.js":"14","C:\\Users\\me\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\components\\sentiments\\Sentiment.js":"15"},{"size":816,"mtime":1609417863441,"results":"16","hashOfConfig":"17"},{"size":465,"mtime":1609417825301,"results":"18","hashOfConfig":"17"},{"size":10437,"mtime":1610212195067,"results":"19","hashOfConfig":"17"},{"size":828,"mtime":1608996192156,"results":"20","hashOfConfig":"17"},{"size":7242,"mtime":1609059494053,"results":"21","hashOfConfig":"17"},{"size":14495,"mtime":1609406826792,"results":"22","hashOfConfig":"17"},{"size":2172,"mtime":1609059494056,"results":"23","hashOfConfig":"17"},{"size":1075,"mtime":1610211278719,"results":"24","hashOfConfig":"17"},{"size":13479,"mtime":1610221316482,"results":"25","hashOfConfig":"17"},{"size":11923,"mtime":1609942674967,"results":"26","hashOfConfig":"17"},{"size":3198,"mtime":1610374580888,"results":"27","hashOfConfig":"17"},{"size":5771,"mtime":1609059494058,"results":"28","hashOfConfig":"17"},{"size":760,"mtime":1609417971168,"results":"29","hashOfConfig":"17"},{"size":4177,"mtime":1610373091624,"results":"30","hashOfConfig":"17"},{"size":1120,"mtime":1610211961072,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1x90zrf",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"34"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"C:\\Users\\me\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\index.js",[],["67","68"],"C:\\Users\\me\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\context\\ThemeContext.js",[],"C:\\Users\\me\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\components\\navigation\\Navbar.js",[],"C:\\Users\\me\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\components\\authentication\\cookies.js",[],"C:\\Users\\me\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\components\\authentication\\Login.js",[],"C:\\Users\\me\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\components\\authentication\\SignUp.js",[],"C:\\Users\\me\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\components\\authentication\\Logout.js",[],["69","70"],"C:\\Users\\me\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\components\\home\\Home.js",[],"C:\\Users\\me\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\components\\profile\\UserProfile.js",[],"C:\\Users\\me\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\components\\charts\\Graphs.js",["71"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Typography, CircularProgress, Container, FormGroup, FormControlLabel, Switch, Card,CardContent } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { Bar, Doughnut } from 'react-chartjs-2';\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Fade from \"@material-ui/core/Fade\";\r\nimport News from \"../home/News\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\n\r\n\r\nconst color = ['rgba(255, 99, 132, 0.8)','rgba(54, 162, 235, 0.8)','rgba(255, 206, 86, 0.8)',\r\n'rgba(75, 192, 192, 0.8)','rgba(153, 102, 255, 0.8)','rgba(255, 159, 64, 0.8)','rgba(255, 99, 132, 0.8)',\r\n'rgba(54, 162, 235, 0.8)','rgba(255, 206, 86, 0.8)','rgba(75, 192, 192, 0.8)','rgba(153, 102, 255, 0.8)',\r\n'rgba(255, 159, 64, 0.8)','rgba(255, 99, 132, 0.8)','rgba(54, 162, 235, 0.8)','rgba(255, 206, 86, 0.8)',\r\n'rgba(75, 192, 192, 0.8)','rgba(153, 102, 255, 0.8)','rgba(255, 159, 64, 0.8)','rgba(255, 99, 132, 0.8)',\r\n'rgba(54, 162, 235, 0.8)','rgba(255, 206, 86, 0.8)','rgba(75, 192, 192, 0.8)','rgba(153, 102, 255, 0.8)',\r\n'rgba(255, 159, 64, 0.8)','rgba(255, 99, 132, 0.8)','rgba(54, 162, 235, 0.8)','rgba(255, 206, 86, 0.8)',\r\n'rgba(75, 192, 192, 0.8)','rgba(153, 102, 255, 0.8)','rgba(255, 159, 64, 0.8)','rgba(255, 99, 132, 0.8)',\r\n'rgba(54, 162, 235, 0.8)','rgba(255, 206, 86, 0.8)','rgba(255, 99, 132, 0.8)','rgba(54, 162, 235, 0.8)',\r\n'rgba(255, 206, 86, 0.8)','rgba(75, 192, 192, 0.8)',]\r\n\r\nconst useStyles = makeStyles(theme=>({\r\n    card: {\r\n        overflowX: \"auto\",\r\n        marginBottom: \"20px\"\r\n    },\r\n    typography: {\r\n        fontFamily: 'Raleway, Arial',\r\n        fontSize: 32,\r\n        color : '#039BE5'\r\n    },\r\n    loading : {\r\n        margin: 'auto',\r\n        width: '50%',\r\n        textAlign:'center',\r\n        paddingTop: '15%'\r\n    },\r\n    root: {\r\n        width: '100%',\r\n        height: '40%',\r\n    },\r\n    divider: {\r\n        margin: `${theme.spacing.unit * 3}px 0`\r\n    }\r\n}))\r\n\r\nconst Graphs = () => {\r\n    const dummy = null;\r\n    const classes = useStyles();\r\n    const [spinner, setSpinner] = useState(true);\r\n    const [toggle,setToggle] = useState({\r\n        switch1: true,\r\n        switch2: true,\r\n        switch3: true,\r\n    });\r\n    const [location, setLocation] = useState([]);\r\n    const [Confirmed, setConfirmed] = useState([]);\r\n    const [deaths, setDeaths] = useState([]);\r\n    const [discharged, setDischarged] = useState([]);\r\n    const [totalConfirmed, settotalConfirmed] = useState([]);\r\n    const [totaldeaths, settotalDeaths] = useState([]);\r\n    const [totaldischarged, settotalDischarged] = useState([]);\r\n    const [time, setTime] = useState({});\r\n    const [type, setType] = useState('totalConfirmed');\r\n    const [news,setNews] = useState([]);\r\n\r\n    const fetchCases = () => {\r\n        axios({\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-type':'application/json'\r\n            },\r\n            url: 'https://api.rootnet.in/covid19-in/stats/latest'\r\n        })\r\n            .then(response => {\r\n                setTimeout(() => setSpinner(false), 1000);\r\n                const labels = response.data.data.regional;\r\n                setLocation(labels.map(label => label.loc));\r\n                setConfirmed(labels.map(label => label.totalConfirmed));\r\n                setDeaths(labels.map(label => label.deaths));\r\n                setDischarged(labels.map(label => label.discharged));\r\n                settotalConfirmed(response.data.data.summary.total);\r\n                settotalDeaths(response.data.data.summary.deaths)\r\n                settotalDischarged(response.data.data.summary.discharged)\r\n                setTime(response.data.lastRefreshed);\r\n            })\r\n            .catch(() => window.alert(\"Please Check you internet connection!\"))\r\n    }\r\n\r\n    const fetchNews = () => {\r\n        axios({\r\n            method:'get',\r\n            headers: {\r\n                'Content-type':'application/json'\r\n            },\r\n            url: 'https://newsapi.org/v2/everything?q=covid&apiKey=13cb9c6ff1be40f8bb5ee37eef23c446'\r\n            })\r\n            .then(data => {\r\n                setTimeout(() => setSpinner(false), 1000);\r\n                setNews(data.data.articles);\r\n            })\r\n            .catch((e) => window.alert(e.message))\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchCases()\r\n        fetchNews()\r\n    },[dummy]);\r\n\r\n    const handleSwitch = (event) => {\r\n        if(event.currentTarget.id === 'switch1') {\r\n            setToggle({...toggle, switch1: !toggle.switch1})\r\n        }\r\n        else if(event.currentTarget.id === 'switch2') {\r\n            setToggle({...toggle, switch2:!toggle.switch2})\r\n        }\r\n        else if(event.currentTarget.id === 'switch3') {\r\n            setToggle({...toggle, switch3:!toggle.switch3})\r\n        }\r\n    }\r\n\r\n    const generateChart = (loc, data, label) => {\r\n        return({\r\n            data: {\r\n                labels:loc,\r\n                datasets:[\r\n                    {\r\n                        label: label,\r\n                        data: data,\r\n                        backgroundColor: color,\r\n                        borderColor: color,\r\n                        borderWidth: 2,\r\n                        hoverBorderWidth:2,\r\n                        hoverBorderColor:'#000'\r\n\r\n                    }\r\n                ],\r\n            },\r\n            width: 1152,\r\n            height: 648,\r\n            tooltips: {\r\n                enabled: false,\r\n              },\r\n            options: {\r\n                legend:{\r\n                    display:true,\r\n                    position:'right'\r\n                },\r\n                scales: {\r\n                    xAxes: [{display: false}]\r\n                  },\r\n                maintainAspectRatio: true,\r\n                responsive: true\r\n            }\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className=\"charts\">\r\n            {\r\n                spinner ?\r\n                    (\r\n                        <div className={classes.loading}>\r\n                            <CircularProgress />\r\n                            <Typography variant=\"h6\">Loading your data..</Typography>\r\n                        </div>\r\n                    ):(\r\n                        <Container>\r\n                             <Grid container className={classes.root} spacing={3}>\r\n                             <Grid item xs={8} className={classes.root}>\r\n                            <Card className={classes.card}>\r\n                                <Typography variant=\"h4\" align=\"center\" style={{fontWeight:'lighter', paddingTop: '20px'}}>\r\n                                    {type==='totalConfirmed'?'Total Confirmed Cases':\r\n                                    type==='totalDeaths'?'Total Deaths':'Total Recovered'}\r\n                                </Typography>\r\n                                <Typography variant=\"h4\" align=\"center\" style={{fontWeight:'lighter', paddingTop: '20px'}}>\r\n                                    <TextField\r\n                                        type='text'\r\n                                        select\r\n                                        value={type}\r\n                                        variant='standard'\r\n                                        color='primary'\r\n                                        margin='normal'\r\n                                        onChange={(event) => setType(event.target.value)}\r\n                                    >\r\n                                        <MenuItem value='totalConfirmed'>Total Confirmed Cases</MenuItem>\r\n                                        <MenuItem value='totalDeaths'>Total Deaths</MenuItem>\r\n                                        <MenuItem value='totalRecovered'>Total Recovered</MenuItem>\r\n                                    </TextField>\r\n                                </Typography>\r\n                                <div style = {{padding: \"10px\"}}>\r\n                                    {\r\n                                    toggle.switch1 ?\r\n                                        <Bar {...generateChart(location, type==='totalConfirmed'?\r\n                                            Confirmed:type==='totalDeaths'?deaths:discharged, type.slice(5, type.length))}/> :\r\n                                        <Doughnut {...generateChart(location, type==='totalConfirmed'?\r\n                                            Confirmed:type==='totalDeaths'?deaths:discharged, type.slice(5, type.length))}/>\r\n                                    }\r\n                                    <FormGroup row>\r\n                                        <FormControlLabel\r\n                                            control={<Switch onChange={handleSwitch} id=\"switch1\" />}\r\n                                            label=\"Switch Graph Type\"\r\n                                        />\r\n                                    </FormGroup>\r\n                                </div>\r\n                            </Card>\r\n                             </Grid>\r\n                             <Fade in={true} timeout={1000}>\r\n                                <Grid item xs={4}>\r\n                                    <Card>\r\n                                    <CardContent>\r\n                                        <Typography\r\n                                            className={\"MuiTypography--heading\"}\r\n                                            variant={\"h4\"}\r\n                                            gutterBottom>Total\r\n                                        </Typography>\r\n                                        <Typography\r\n                                            className={classes.typography}\r\n                                            variant={\"h5\"}\r\n                                            gutterBottom>{totalConfirmed}\r\n                                        </Typography>\r\n                                        <Divider className={classes.divider} light />\r\n                                        <Typography\r\n                                            className={\"MuiTypography--subheading\"}\r\n                                            variant={\"h4\"}>Discharged\r\n                                        </Typography>\r\n                                        <Typography\r\n                                            className={classes.typography}\r\n                                            variant={\"h5\"}\r\n                                            gutterBottom>{totaldischarged}\r\n                                        </Typography>\r\n                                        <Divider className={classes.divider} light />\r\n                                        <Typography\r\n                                            className={\"MuiTypography--subheading\"}\r\n                                            variant={\"h4\"}>Deaths\r\n                                        </Typography>\r\n                                        <Typography\r\n                                            className={classes.typography}\r\n                                            variant={\"h5\"}\r\n                                            gutterBottom>{totaldeaths}\r\n                                        </Typography>\r\n                                        <Divider className={classes.divider} light />\r\n                                    </CardContent>\r\n                                    </Card>\r\n                                </Grid>\r\n                             </Fade>\r\n                             <Fade in={true} timeout={1000}>\r\n                                <Grid item xs={12}><News news = {news}/></Grid>\r\n                             </Fade>\r\n                             </Grid> \r\n                        </Container>\r\n                    )\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Graphs;","C:\\Users\\me\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\components\\home\\News.js",[],"C:\\Users\\me\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\components\\authentication\\OTP.js",[],"C:\\Users\\me\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\App.js",["72"],"import React from \"react\";\r\nimport {ThemeProvider, createMuiTheme, colors, CssBaseline} from \"@material-ui/core\";\r\nimport Navbar from \"./components/navigation/Navbar\";\r\nimport {blue, red} from \"@material-ui/core/colors\";\r\nimport {ThemeContext} from \"./context/ThemeContext\";\r\n\r\nconst App = () => {\r\n  const {dark} = React.useContext(ThemeContext);\r\n\r\n  const theme = createMuiTheme({\r\n    palette: {\r\n      type: dark ? 'dark' : 'light',\r\n      primary: {\r\n        main: dark?blue[300]:blue[800],\r\n      },\r\n      secondary: {\r\n        main: dark?red[300]:red[800],\r\n      },\r\n    },\r\n  })\r\n\r\n  return (\r\n     <>\r\n      <ThemeProvider theme={theme}>\r\n        <CssBaseline/>\r\n        <Navbar/>\r\n      </ThemeProvider>\r\n      </>\r\n  )\r\n}\r\n\r\nexport default App;\r\n",["73","74"],"C:\\Users\\me\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\components\\hospital\\Hospitals.js",["75","76"],"C:\\Users\\me\\Desktop\\COVID-19_Bed-Allotment-System\\frontend\\src\\components\\sentiments\\Sentiment.js",[],{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"77","replacedBy":"81"},{"ruleId":"79","replacedBy":"82"},{"ruleId":"83","severity":1,"message":"84","line":66,"column":12,"nodeType":"85","messageId":"86","endLine":66,"endColumn":16},{"ruleId":"83","severity":1,"message":"87","line":2,"column":40,"nodeType":"85","messageId":"86","endLine":2,"endColumn":46},{"ruleId":"77","replacedBy":"88"},{"ruleId":"79","replacedBy":"89"},{"ruleId":"83","severity":1,"message":"90","line":1,"column":17,"nodeType":"85","messageId":"86","endLine":1,"endColumn":26},{"ruleId":"83","severity":1,"message":"91","line":38,"column":20,"nodeType":"85","messageId":"86","endLine":38,"endColumn":29},"no-native-reassign",["92"],"no-negated-in-lhs",["93"],["92"],["93"],"no-unused-vars","'time' is assigned a value but never used.","Identifier","unusedVar","'colors' is defined but never used.",["92"],["93"],"'useEffect' is defined but never used.","'setStores' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]