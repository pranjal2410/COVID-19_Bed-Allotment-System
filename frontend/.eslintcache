[{"/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/components/staff/StaffChat.js":"1","/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/components/hospital/HospitalDetail.js":"2","/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/App.js":"3","/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/components/charts/Graphs.js":"4","/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/components/authentication/Login.js":"5","/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/components/hospital/Hospitals.js":"6","/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/components/home/Home.js":"7","/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/components/chat/reviews.js":"8","/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/components/staff/StaffPanel.js":"9","/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/components/navigation/Navbar.js":"10","/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/components/profile/UserProfile.js":"11","/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/components/about/About.js":"12","/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/components/authentication/SignUp.js":"13","/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/components/authentication/Logout.js":"14","/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/context/ThemeContext.js":"15","/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/components/authentication/cookies.js":"16"},{"size":9500,"mtime":1621077774806,"results":"17","hashOfConfig":"18"},{"size":10412,"mtime":1621078618483,"results":"19","hashOfConfig":"18"},{"size":741,"mtime":1621026888147,"results":"20","hashOfConfig":"18"},{"size":10872,"mtime":1620676219228,"results":"21","hashOfConfig":"18"},{"size":7135,"mtime":1621026888147,"results":"22","hashOfConfig":"18"},{"size":7510,"mtime":1621207898479,"results":"23","hashOfConfig":"18"},{"size":1471,"mtime":1621073663486,"results":"24","hashOfConfig":"18"},{"size":2303,"mtime":1621075598004,"results":"25","hashOfConfig":"18"},{"size":6024,"mtime":1621077774806,"results":"26","hashOfConfig":"18"},{"size":13208,"mtime":1621209836529,"results":"27","hashOfConfig":"18"},{"size":13147,"mtime":1621210715889,"results":"28","hashOfConfig":"18"},{"size":1093,"mtime":1618518646818,"results":"29","hashOfConfig":"18"},{"size":14211,"mtime":1620582616539,"results":"30","hashOfConfig":"18"},{"size":2120,"mtime":1621164657963,"results":"31","hashOfConfig":"18"},{"size":447,"mtime":1618518646822,"results":"32","hashOfConfig":"18"},{"size":800,"mtime":1621077774806,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},"1framo8",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/components/staff/StaffChat.js",["71"],"import React from \"react\";\nimport { Box, Chip,Grid, IconButton, Paper, TextField, Typography,makeStyles} from \"@material-ui/core\";\nimport { Redirect } from \"react-router\";\nimport jwtDecode from 'jwt-decode'\nimport axios from \"axios\";\nimport {getToken} from \"../authentication/cookies\";\nimport Button from \"@material-ui/core/Button\";\nimport { SendRounded } from \"@material-ui/icons\";\nimport { useSnackbar } from \"notistack\";\nimport clsx from \"clsx\";\n\nconst useStyles = makeStyles((theme) => ({\n    messageLeft : {\n        display:'flex',\n        justifyContent:'flex-start'\n    },\n    messageRight : {\n        display:'flex',\n        justifyContent:'flex-end'\n    },\n    message : {\n        padding:5,\n        margin : 5,\n        justifyContent : 'flex-end',\n        backgroundColor : theme.palette.primary,\n        width:'fit-content'\n    }\n}));\n\nconst StaffChat = () => {\n    let token = getToken();\n    const is_staff = token ==='' ? 'true' : jwtDecode(token).is_staff;\n    const [text, setText] = React.useState('');\n    const [messages, setMessages] = React.useState([]);\n    const [chats,setChats] = React.useState([]);\n    const [socket,setSocket] = React.useState(null);\n    const classes = useStyles();\n    const [currentChatUser,setcurrentChatUser] = React.useState({email : '',name : '',slug : ''});\n    const {enqueueSnackbar, closeSnackbar} = useSnackbar();\n    const showAlert = (key,message,variant)=>enqueueSnackbar(message, {variant: variant, key: key});\n    const closeAlert = (key,time)=>setTimeout(() => closeSnackbar(key),time);\n\n    React.useEffect(() => {\n        showAlert('chats','Getting your chats...','info');\n        axios.get(`${process.env.REACT_APP_API_URL}/portal/hospitals/${jwtDecode(token).hospital_slug}/`,{\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    Authorization: `Token ${token}` // fetch all chats of hospital\n                }\n            }).then(res=>{\n                closeAlert('chats',2000);\n                setChats(res.data.chats);\n                setcurrentChatUser({\n                    ...currentChatUser,\n                    email : res.data.chats[0].user_email,\n                    name : res.data.chats[0].name,\n                    slug : res.data.chats[0].chat_slug\n                })\n                connecttoSocket(res.data.chats[0].chat_slug);\n            }).catch((error)=>{\n                closeAlert('chats',2000);\n                showAlert('chats_error',error.message,'error');\n                closeAlert('chats_error',2000);\n            })\n\n            return ()=>{\n                if(socket){\n                    socket.close();\n                }\n            }\n    }, []);\n\n    \n    if(token === '' || is_staff===false) {\n        return <Redirect to='/'/>\n    }\n\n    const connecttoSocket = (slug)=>{\n        var element = document.getElementById(\"chat\");\n        let socket = new WebSocket(`${process.env.REACT_APP_SOCKET_URL}/ws/chat/${slug}/`);\n        socket.onopen = function(e) {\n            socket.send(JSON.stringify({\n                'command': 'fetch_messages',\n                'email': jwtDecode(token).email,\n                'chatSlug': slug\n            }))\n            setMessages(JSON.parse(e.data).messages)\n            element.scrollTop = element.scrollHeight;\n        };\n\n        socket.onmessage = (e)=>{\n            setMessages(JSON.parse(e.data).messages)\n            element.scrollTop = element.scrollHeight;\n        }\n\n        socket.onclose = function(event) {\n            if (event.wasClean) {\n                showAlert('socket_close',`Connection closed cleanly, code=${event.code} reason=${event.reason}`,'error');\n            } else {\n                showAlert('socket_close','Connection died','error');\n            }\n            closeAlert('socket_close',2000);\n        };\n\n        socket.onerror = function(error) {\n            showAlert('socket_error',error,'error');\n            closeAlert('socket_error',2000);\n        }; \n        setSocket(socket);\n    }\n\n\n    const sendMessage = () => {\n        socket.send(JSON.stringify({\n            'message': text,\n            'from': (jwtDecode(getToken())).email,\n            'command': 'new_message',\n            'chatSlug': currentChatUser.slug //old state\n        }));\n        \n        let user_chats = [...chats];\n        user_chats.forEach(chat=>{\n            if(chat.user_email === currentChatUser.email){\n                chat.last_message = text;\n            }\n        })\n        setChats(user_chats);\n        setText('');\n    }\n\n    const handleChange = (email,name,slug)=>{\n        if(email!==currentChatUser.email){\n            setcurrentChatUser({\n                ...currentChatUser,\n                email : email,\n                name : name,\n                slug : slug\n            })\n            //connect to socket\n            if(socket){\n                socket.close();\n            }    \n            connecttoSocket(slug); \n        }\n    }\n\n    const renderMessages = ()=>(\n        <React.Fragment>\n            {messages.map(message=>(\n                <Box key={message.id} color=\"primary.main\" className={clsx({\n                    [classes.messageLeft] : (message.user !== jwtDecode(token).email), //always applies\n                    [classes.messageRight] : (message.user === jwtDecode(token).email) //only when open === true\n                })}>\n                    <Paper variant='outlined' className={classes.message}>\n                        <Typography variant='h6'>{message.message}</Typography>\n                        <Typography variant='caption' color='textSecondary'>{renderTimestamp(message.timestamp)}</Typography>\n                    </Paper>\n                </Box>\n            ))}\n        </React.Fragment>\n    )\n    const renderTimestamp = timestamp => {\n        let prefix = \"\";\n        const timeDiff = Math.round(\n            (new Date().getTime() - new Date(timestamp).getTime()) / 60000\n        );\n        if (timeDiff < 1) {\n            // less than one minute ago\n            prefix = \"just now...\";\n        } else if (timeDiff < 60 && timeDiff > 1) {\n            // less than sixty minutes ago\n            prefix = `${timeDiff} minutes ago`;\n        } else if (timeDiff < 24 * 60 && timeDiff > 60) {\n            // less than 24 hours ago\n            prefix = `${Math.round(timeDiff / 60)} hours ago`;\n        } else if (timeDiff < 31 * 24 * 60 && timeDiff > 24 * 60) {\n            // less than 7 days ago\n            prefix = `${Math.round(timeDiff / (60 * 24))} days ago`;\n        } else {\n            prefix = `${new Date(timestamp).toDateString()}`;\n        }\n        return prefix;\n    };\n\n    const renderChats = ()=>(\n        <React.Fragment>\n            {chats.map(chat=>( \n                <Paper elevation={2} key={chat.chat_slug} \n                        style={{marginTop:10,padding:10,display:\"flex\",justifyContent:'space-between'}}\n                        onClick={handleChange.bind(this,chat.user_email,chat.name,chat.chat_slug)}\n                        >\n                    <div>\n                        <Typography variant='h6'>{chat.name}</Typography>\n                        <Typography variant='caption' color=\"textSecondary\">{chat.last_message}</Typography>\n                    </div>\n                    <Chip size='small' label={'Active'} color='primary'/>\n                </Paper>\n                    )\n                )\n            }\n        </React.Fragment>\n    )\n\n    return (\n       <Grid container spacing={3}>\n           <Grid item xs={6}>\n                <Paper elevation={2} style={{padding:10,display:\"flex\",justifyContent:'space-between'}}>\n                    <Typography variant='h4'>Chats</Typography>\n                    <Button variant='contained' color='primary' size=\"small\">Broadcast Message</Button>\n                </Paper>   \n                {renderChats()}\n           </Grid>\n           <Grid item xs={6}>\n                <Box>\n                    <Paper elevation={3} style={{padding:10}}>\n                        <Typography variant='h5'>{currentChatUser.name}</Typography>\n                        <Typography variant='h6' color=\"textSecondary\" >{currentChatUser.email}</Typography>\n                    </Paper>\n                    <Paper elevation={3} id='chat' style={{\n                        marginTop:10,\n                        height:500,\n                        padding:10,\n                        overflow:'auto'\n                        }}>\n                        {renderMessages()}\n                    </Paper>\n                    <Paper elevation={3} style={{\n                        padding :10,\n                        alignItems:'center',\n                        bottom:0,\n                        overflow:'hidden',\n                        display:'flex',\n                        justifyContent:'space-between',\n                        marginTop:10\n                    }}>\n                        <TextField\n                            placeholder=\"Type a message\"\n                            variant='outlined'\n                            onChange={(event => setText(event.target.value))}\n                            value={text}\n                            fullWidth\n                        />\n                        <IconButton  onClick={sendMessage}>\n                            <SendRounded fontSize='large'/>\n                        </IconButton>\n                    </Paper>           \n                </Box>           \n           </Grid>\n       </Grid>\n    )\n}\n\nexport default StaffChat;","/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/components/hospital/HospitalDetail.js",[],"/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/App.js",[],["72","73"],"/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/components/charts/Graphs.js",[],"/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/components/authentication/Login.js",[],["74","75"],"/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/components/hospital/Hospitals.js",[],"/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/components/home/Home.js",[],"/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/components/chat/reviews.js",[],"/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/components/staff/StaffPanel.js",["76","77"],"/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/components/navigation/Navbar.js",[],"/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/components/profile/UserProfile.js",[],"/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/components/about/About.js",[],"/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/components/authentication/SignUp.js",[],["78","79"],"/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/components/authentication/Logout.js",[],["80","81"],"/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/context/ThemeContext.js",[],"/home/chogi/Codes/GitHub/COVID-19_Bed-Allotment-System/frontend/src/components/authentication/cookies.js",[],{"ruleId":"82","severity":1,"message":"83","line":71,"column":8,"nodeType":"84","endLine":71,"endColumn":10,"suggestions":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"86","replacedBy":"90"},{"ruleId":"88","replacedBy":"91"},{"ruleId":"92","severity":1,"message":"93","line":3,"column":10,"nodeType":"94","messageId":"95","endLine":3,"endColumn":18},{"ruleId":"82","severity":1,"message":"96","line":110,"column":7,"nodeType":"84","endLine":110,"endColumn":9,"suggestions":"97"},{"ruleId":"86","replacedBy":"98"},{"ruleId":"88","replacedBy":"99"},{"ruleId":"86","replacedBy":"100"},{"ruleId":"88","replacedBy":"101"},"react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'closeAlert', 'connecttoSocket', 'currentChatUser', 'showAlert', 'socket', and 'token'. Either include them or remove the dependency array. You can also do a functional update 'setcurrentChatUser(c => ...)' if you only need 'currentChatUser' in the 'setcurrentChatUser' call.","ArrayExpression",["102"],"no-native-reassign",["103"],"no-negated-in-lhs",["104"],["103"],["104"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","React Hook React.useEffect has missing dependencies: 'closeAlert', 'showAlert', and 'token'. Either include them or remove the dependency array.",["105"],["103"],["104"],["103"],["104"],{"desc":"106","fix":"107"},"no-global-assign","no-unsafe-negation",{"desc":"108","fix":"109"},"Update the dependencies array to be: [closeAlert, connecttoSocket, currentChatUser, showAlert, socket, token]",{"range":"110","text":"111"},"Update the dependencies array to be: [closeAlert, showAlert, token]",{"range":"112","text":"113"},[2691,2693],"[closeAlert, connecttoSocket, currentChatUser, showAlert, socket, token]",[2983,2985],"[closeAlert, showAlert, token]"]